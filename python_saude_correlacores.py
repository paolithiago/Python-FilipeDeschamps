# -*- coding: utf-8 -*-
"""Python_Saude_Correlacores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZCH1W6kZTKHbid053wMBXxcYY1xlAPF

**IMPORT - MONTAGEM GOOGLE DRIVE - DIRETORIOS - CARREGAMENTO EXCEL COM ABAS**
"""

import pandas as pd                               #Importa bibioteca pandas
import matplotlib.pyplot as plt                   #importa biblioteca matplot (grafico)
from google.colab import drive                    #importa biblioteca para acessar google drive 
import os                                         #importa biblioteca que gerencia comandos SO
import seaborn as sns

drive.mount("/content/gdrive")                    #monta drive google drive (g-drive)
print(os.getcwd())                                #imprime o diretorio atual
os.chdir('/content/gdrive/My Drive/ComPython')    #altera diretorio
print(os.getcwd())                                #imprime diretorio atual

#os.listdir()                                      #lista diretorio atual
df = pd.read_excel('/content/gdrive/My Drive/ComPython/correlacoes.xlsx' , sheet_name= None)   #Carrega arquivo excel com Sheet_name como None para escolher abas       
df.keys()                                                                                      #mostra as abas
dfcompleta = df['Listacompleta']                                                               #cria uma variavel para lista completa
dfruim = df['ListaRuim']                                                                       #cria uma variavel para lista ruim

"""**RELATORIO - LISTA TOTAL DE ALIMENTOS CATALOGADOS**"""

dfcompleta.head()                                                                             #IMprime primeiras linas

dfcompleta.describe()                                                                         #imprime dados esatisticos

print("valor maximo -->Calorias:",dfcompleta['cal'].max())                                     #imprime valor maximo da coluna Caloria
print("Valor Minimo -->Calorias:",dfcompleta['cal'].min())                                     #imprime valor minimo da coluna Calria
print("Valor Media -->Calorias:{:.2f}".format(dfcompleta['cal'].mean()))                       #imprime valor medio da coluna caloria

print("________________________________________________________________________")

print("valor maximo -->Carboidrato:",dfcompleta['carb'].max())                                 #imprime valor maximo coluna carboidrato
print("Valor Minimo -->Carboidrato:",dfcompleta['carb'].min())                                 #imprime valor minimo coluna carobidrato
print("Valor Media -->Carboidrato:{:.2f}".format(dfcompleta['carb'].mean()))                   #imprime valor media coluna Carboidrato

dfcompleta['cal'].plot.hist()                                                                   #Histograma Jeito um de fazer  
plt.show()

plt.hist('cal',data = dfcompleta,bins = 8, density=True)                                      #Histograma 2 - selecioa coluna - data = nosso df
plt.title('Histograma Calorias Alimentos Completos')                                          #Titulo
plt.show()                                                                                    #finaliza grafico

dfcompleta.plot.scatter(x = 'cal' , y = 'carb',s = 30)                                      #plota scaterplot
plt.show()                                                                                  #Finaliza grafico



"""**RELATORIO - LISTA RUIM  DE ALIMENTOS CATALOGADOS**"""

dfruim.head()                                                                            #Printa primeiras linhas

dfruim.describe()                                                                       #printa dados estatisiticos

print("valor maximo -->Calorias:",dfruim['cal'].max())                                     #imprime valor maximo da coluna Caloria
print("Valor Minimo -->Calorias:",dfruim['cal'].min())                                     #imprime valor minimo da coluna Calria
print("Valor Media -->Calorias:{:.2f}".format(dfruim['cal'].mean()))                       #imprime valor medio da coluna caloria

print("________________________________________________________________________")

print("valor maximo -->Carboidrato:",dfruim['carb'].max())                                 #imprime valor maximo coluna carboidrato
print("Valor Minimo -->Carboidrato:",dfruim['carb'].min())                                 #imprime valor minimo coluna carobidrato
print("Valor Media -->Carboidrato:{:.2f}".format(dfruim['carb'].mean()))                   #imprime valor media coluna Carboidrato

plt.hist('cal',data=dfruim, bins=8 , density=True)                                         #Gera Histograma
plt.title('Histograma Calorias Alimento Ruim')                                             #Insere Titulos
plt.show()

dfruim.plot.scatter(x = 'cal' , y = 'carb' , s= 30)                                       #imprime Scaterplot
plt.show()



"""**ANALISE CORRELAÇÃO DUAS COLUNAS**"""

#Crar uma matriz de correlação. Aqui com  FUNCAO CORR faz uma correlacao entrea as coluna inclusive com ela mesma
corr = dfcompleta[['cal','carb']].corr()
display(corr)
sns.heatmap(corr,cmap='RdBu', fmt = '.2f', square = True,linecolor='white', annot=True)
plt.show()

#Crar uma matriz de correlação. Aqui com  FUNCAO CORR faz uma correlacao entrea as coluna inclusive com ela mesma
corr = dfruim[['cal','carb']].corr()
display(corr)
sns.heatmap(corr,cmap='RdBu', fmt = '.2f', square = True,linecolor='white', annot=True)
plt.show()



"""**ANALISE DE OUTLIERS**"""

dfcompleta.cal.plot(kind = 'box', vert = False , figsize = (15,6))              #Cria boxplot para analise de outliers
plt.show()

dfruim.cal.plot(kind = 'box', vert = False , figsize = (15,6))
plt.show()

