# -*- coding: utf-8 -*-
"""AnaliseCovidComResumos2,3Sig.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19adA51-e_8IRDvfflTIxW8vvf0hhffC1
"""

!pip install pdfplumber

import pandas as pd                          # CARREGA PANDAS
import matplotlib.pyplot as plt              # CARREGA MATPLOTLIB
import seaborn as sns                        # cARREGA SEABORN
from google.colab import drive               # IMPORTA COLAB
import os                                    # IMPORTAT BIBLIOTECA OS
import pdfplumber                            # IMPORTA BIBLIOTECA PARA MANIPULAR

drive.mount('/content/gdrive')

print(os.getcwd())
os.chdir('/content/gdrive/My Drive/Trilha de Aprendizado/Python/datasets')
print(os.getcwd())
os.listdir()

df = pd.read_csv('/content/gdrive/My Drive/Trilha de Aprendizado/Python/datasets/covid.csv')

df.head()

print('Quantidade de linhas',df.shape[0])                                           # IMPRIME QUANTIDADE DE LINHAS
print('Quantidade de colunas',df.shape[1])                                          # IMPRIME QUANTIDADE DE COLUNAS
print(df['O_Acu_Dia'].sum())                                                        # IMPRIME O TOTAL DE CASOS ACUMULADOS  
print(df['O_Acu_Dia'].mean())                                                       # IMPRIME A MEDIA DE CASOS ACUMULADOS      
print(df.groupby('estado')['C_Acu_Dia'].sum().sort_values(ascending = False))       # VERFICAR O VALORES SOMADOS AGRUPADOS POR ESTADO(NAO TEMOS ESTADOS REPETIDOS NETE DATASET)   
print(df['estado'].value_counts())                                                  # VERIFICAR INCIDENCIA DE ESTADOS POR LINHA(NAO TEMOS ESTADO REPETIDO)
print(df.isnull().sum())                                                            # VERIFICA SE TEM VALORES NULOS, CASO TENHA ,SOMA        
print(df['estado'].unique())                                                        # IMPRIME VALORES UNICOS DA COLUNA ESTADO  
df['estado'] = df['estado'].apply(lambda x: x.lower())                              # CRIADA FUNCAO LAMBDA PARA DEIXAR AS LETRAS DA COLUNA ESTADO MINUSCULAS

df.head()

pdf = pdfplumber.open('/content/gdrive/My Drive/Trilha de Aprendizado/Python/arquivospdf/Folder_coronavirus.pdf')  # ABRE ARQUIVO PDF

print(pdf.pages)                                                                    # IMPRIME AS PAGINAS DO ARQUIVO PDF                                                 
dfpagina1 = pdf.pages[1]                                                            # CRIA UM OBJETO PARA RECEBER A PAGINA 1 DO PDF' 0 INDEX PYTHON COMECA EM 0
textopg1 = dfpagina1.extract_text()                                                 # CRIA OBJETO PARA RECEBER CONTEUDO DA PAGINA 1
#print(textopg1)                                                                    
texto1pgv1 = textopg1.split('\n')#[9].replace('descar','descartavel')               # CRIA M OBJETO QUE RECEBE CONTEUDO SEPARADO POR QUEBRA DE LINHA   
texto1pgv1                                                                          # IMPRIMW O CONTEUDO JA SEPARADO POR QUEBRA DE LINHA

sintoma1 = texto1pgv1[17].split(' ')[1]                                             # LOCALIZAR VALOR DE SINTOMA 1 NO CONTEUDO
sintoma2 = texto1pgv1[19].split(' ')[1]                                             # LOCALIZA VALOR DE SINTOMA 2 NO CONTEUDO    
print("Principais sintomas:",sintoma1 + " ",sintoma2)                               # IMPRIME SINTOMAS 1 E 2

plt.plot(df['estado'],df['C_Acu_Dia'])
plt.title('Analise Covid Brasil')
plt.xlabel('Estados')
plt.ylabel('Casos')

plt.plot('estado','C_Acu_Dia', data = df)
plt.title('Analise Covid Brasil')
plt.xlabel('Estados')
plt.ylabel('Casos')

df.head()
df[df['estado']=='mg']

print(df[df['estado']=='sp'].value_counts())

df.tail()

df.groupby('estado')['O_Acu_Dia'].sum().sort_values(ascending = False).plot.pie()

print("Media de Contaminados:{:.2f} ".format(df['C_Acu_Dia'].mean()))

plt.hist('C_Acu_Dia',data = df,bins = 8,density = False)
plt.show()

df.plot.scatter(x='C_Acu_Dia', y = 'O_Acu_Dia',s=60)
plt.show()

df.boxplot(['C_Acu_Dia','O_Acu_Dia'])

corr = df[['C_Acu_Dia','O_Acu_Dia']].corr()
display(corr)

sns.heatmap(corr,cmap='RdBu', fmt = '.2f', square = True,linecolor='white', annot=True)

!pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip -q

import pandas as pd                                       #biblioteca pandas
from pandas_profiling import ProfileReport                #biblioteca para usar profile report
report = ProfileReport(df)                              #cria o profile report
report.to_notebook_iframe()                             #gera overview dos dados

! pip install sweetviz -q # INSTALA SWEETVIZ

import sweetviz
relatorio_sweet = sweetviz.analyze(df)

relatorio_sweet.show_html('Teste.html')

